Q-1:-
HTTP/1.1 and HTTP/2 Main Differences is given below:-
Launching of the HTTP/2 was an attempt to overcome the limitations of HTTP/1.1 and make it a more efficient web protocol.
the major differences in these two are mainly the additions or upgrades applied in HTTP/2. Let’s see what they are:-
HTTP/1.1:- The first standardized version of HTTP, HTTP/1.1, was published in early 1997, only a few months after HTTP/1.0.
[1]HTTP protocol was developed in 1989 as the common language that enables client and server machines’ interaction. Process steps are as enlisted:-
-The client (browser) has to send a request to the server using the method (GET/POST).
-Server responds with the requested resource, for example – image, alongside the status of what it did to the client’s request.
Keep in mind that this is not a one-time process. 
Such requests and responses needs to be transferred between both these machines until the client receives all the resources, essential to load a web page on the end-user’s (your) screen.

This request-response exchange can be regarded as an IP stack being handled by transfer layer and networking layers before finally reaching to the application layer. 
Now, let’s see how HTTP/2 handles the same scenario.
HTTP/2:- HTTP/2 was released in 2015 as a major revision to the HTTP/1.1 protocol.
HTTP/2 was released at Google as the significant improvement of its predecessor. 
It was initially modeled after the SPDY protocol and went through significant changes to include,
features like multiplexing, header compression, and stream prioritization to minimize page load latency. 
After its release, Google announced that it would not provide support for SPDY in favor of HTTP/2.

The major feature that differentiates HTTP/2 from HTTP/1.1 is the binary framing layer. 
Unlike HTTP/1.1, HTTP/2 uses a binary framing layer. 
This layer encapsulates messages – converted to its binary equivalent – while making sure that its HTTP semantics (method details, header information, etc.) remain untamed. 
This feature of HTTP/2 enables gRPC to use lesser resources.
Q-2:-
What is objects and its internal representation in JavaScript?
Loosely speaking, objects in JavaScript may be defined as: 
an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. 
These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.



